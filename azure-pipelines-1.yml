# Starter pipeline : AutoMerge Pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  batch: "true"
  branches:
    include:
      - feature/Test1234

pr:
  autoCancel: "true"
  branches:
    include:
      - feature/Test1234
variables:
  - group: TestVariableGroup
      
jobs:

- job: AutoMergeToMaster
  displayName: Auto Merge
  steps: 
  - checkout: self
    persistCredentials: true
    clean: true
    env:
      AZURE_DEVOPS_EXT_PAT: $PAT_TOKEN
      SYSTEM_ACCESSTOKEN: $System.AccessToken
  - powershell: |

       Write-Host $(PAT_TOKEN)
       Write-Host "This is a script that could use $env:SYSTEM_ACCESSTOKEN"
       Write-Host $env:AZURE_DEVOPS_EXT_PAT
       Write-Host $(allowAutoMerge);
       Write-Host $System.AccessToken
       $env:SYSTEM_ACCESSTOKEN =  $System.AccessToken
       Write-Host $env:SYSTEM_ACCESSTOKEN
       if($(allowAutoMerge) -eq 1){

          git --version
          git config --global user.email "Prashantsxn8@gmail.com"
          git config --global user.name "Prashantsaxena88811"
          git checkout feature/Test1234
          git pull origin feature/Test1234
          git checkout master
          git merge feature/Test1234
          git push origin master

          $personalAccessToken = $PAT_TOKEN
          $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f "",$personalAccessToken)))
          $accountname = "PrashantsaxenaSF"
          $variableGroupName = "TestVariableGroup"
          $projectName = "TestProject-Vivek"

          $vstsUri = "https://dev.azure.com/PrashantsaxenaSF/" 
          # + $accountname + ".visualstudio.com/"

          # GET https://{accountName}.visualstudio.com/{project}/_apis/distributedtask/variablegroups?api-version=4.1-preview.1
          # get variable groups and find our one
          $call = $vstsUri + $projectName + "/_apis/distributedtask/variablegroups?api-version=5.1-preview.1"
          $result = Invoke-RestMethod -Uri $call -Method Get -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)}

          $groupId = (2)
          Write-Host $result.value
          echo $result.value
          foreach($group in $result.value) {
              Write-Host  $group.name
              if($group.name.Equals($variableGroupName)) {
                  Write-Host  $group.id
                  $groupId = $group.id
                  break;
              }
          }

          # if we can't find the group, throw an error
          Write-Host "Group Id is " $groupId
          if($groupId -lt 0) {

              # throw("Couldn't find group")

          }

          # get full json for our group
          $call = $vstsUri + $projectName + "/_apis/distributedtask/variablegroups/" + $groupId + "?api-version=5.1-preview.1"
          $group = Invoke-RestMethod -Uri $call -Method Get -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)}
          Write-Host "Group is " $group

          # https://docs.microsoft.com/en-us/rest/api/vsts/_apis/distributedtask/variablegroups/variablegroups/update?view=vsts-rest-4.1
          # update variable group by id
          # $group.variables.$isCommitFromHotFix = @{}
          $group.variables.$isCommitFromHotFix += @{"value" = "New Secret Value"}
          # $group.variables.isCommitFromHotFix += @{"isSecret" = $true}

          $call = $vstsUri + $projectName + "/_apis/distributedtask/variablegroups/" + $groupId + "?api-version=5.1-preview.1"
          $result = Invoke-RestMethod -Uri $call -Method Put -ContentType "application/json" -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)} -Body (ConvertTo-Json $group -Depth 10) 

         }else {
          write-host("No Auto Merge")
       }
       

 