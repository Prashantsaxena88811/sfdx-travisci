# Starter pipeline : AutoMerge Pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  batch: "true"
  branches:
    include:
      - feature/Test1234

pr:
  autoCancel: "true"
  branches:
    include:
      - feature/Test1234
variables:
  - group: TestVariableGroup
      
jobs:

- job: AutoMergeToMaster
  
  displayName: Auto Merge
  steps: 
  - checkout: self
    persistCredentials: true
    clean: true
  - powershell: |
       echo $allowAutoMerge
       $initiateAutoMerge = $allowAutoMerge;
       if($initiateAutoMerge -eq 1){
          write-host("*****Initiating AutoMerge To master******");
          git --version
          git config --global user.email "Prashantsxn8@gmail.com"
          git config --global user.name "Prashantsaxena88811"
          git checkout feature/Test1234
          git pull origin feature/Test1234
          git checkout master
          git merge feature/Test1234
          git push origin master
       }else {
          write-host("No Auto Merge")
       }
  - bash: 
        ORGANIZATION="PrashantsaxenaSF"
        PROJECT="TestProject-Vivek"
        TOKEN="w6hmwl5giih6wchrrxckertlsepwlloqhs3me2ejv424z3curtpa"
        ORGANIZATION_URL="https://dev.azure.com/$ORGANIZATION/"
        targetGroup="TestVariableGroup"
        findString="0"
        replaceString="1"
       # authenticate to Azure DevOps CLI
    echo $TOKEN | az devops login --org $ORGANIZATION_URL
          
      group_json=$(az pipelines variable-group list --org $ORGANIZATION_URL -p $PROJECT --group-name $targetGroup)
      targetGroupId=$(jq -r ".[].id"  <<< "$group_json")
      for key in $(jq -r '.[].variables | keys | .[]' <<< "$group_json"); do
      node=$(jq -r ".[].variables[\"$key\"]"  <<< "$group_json");
      value=$(jq -r '.value' <<< "$node");
      if [[ $value == *$findString* ]]; then
        newvalue=${value/$findString/$replaceString}
        echo "Replacing $value with $newvalue for $key variable"
        az pipelines variable-group variable update --org $ORGANIZATION_URL -p $PROJECT --group-id $targetGroupId --name "$key" --value "$newvalue"
      fi
        done 
      
        groups=$(az pipelines variable-group list --org $ORGANIZATION_URL -p $PROJECT --group-name $targetGroup | jq -r ".[].name")
        for group in $groups; do
        echo $group
        az pipelines variable-group list --org $ORGANIZATION_URL -p $PROJECT --group-name $group | grep $findString;
